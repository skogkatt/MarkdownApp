@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using MarkdownApp.Shared.Models
@using MarkdownApp.Shared.ViewModels
@using MarkdownApp.Shared.ViewModels.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject ILoginViewModel _loginViewModel

<PageTitle>Login</PageTitle>
@*<h3>MarkDown Home Page</h3>*@

<div class="card">
    <div class="card-body">
        <EditForm Model="@credentials" OnValidSubmit="@(() => LoginUser(credentials))">
            <DataAnnotationsValidator />
            <div class="form-group" style="margin-bottom: 1rem;">
                <label>Email</label>
                <InputText @bind-Value="credentials.Email" class="form-control" @onclick="@(() => {isActive = false;})" />
                <ValidationMessage For="@(() => credentials.Email)" />
            </div>
            <div class="form-group" style="margin-bottom: 1rem;">
                <label>Password</label>
                <InputText @bind-Value="credentials.Password" type="password" class="form-control" @onclick="@(() => {isActive = false;})" />
                <ValidationMessage For="@(() => credentials.Password)" />
            </div>
            <div class="form-group">
                @if (isActive)
                {
                    <div class="validation-message" style="margin-bottom: 1rem;"> Email or Password are incorrect !</div>
                }
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary" style="width: 100%">Login</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private bool isActive = false;
    private string errorMessage = string.Empty;

    [Inject]
    public User credentials { get; set; }

    public async Task LoginUser(User paramCredentials)
    {
        try
        {
            errorMessage = await _loginViewModel.LoginUser(credentials);

            //Success
            if (string.IsNullOrEmpty(errorMessage))
            {
                isActive = false;
                NavigationManager.NavigateTo("/index", true);
            }

            else
            {
                isActive = true;
                //NavigationManager.NavigateTo("/", true);
            }

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
}